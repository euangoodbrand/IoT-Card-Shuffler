# COM3505 Lab Assessment 1

# ESP32 WiFi Provisioning and OTA Firmware Update

This C++ code is designed for an ESP32 microcontroller to provide WiFi provisioning and over-the-air (OTA) firmware updates. The code sets up an access point (AP) using the ESP32, which users can connect to in order to configure the device with their WiFi credentials. Once connected, the device can perform OTA firmware updates using a provided firmware server.

## Setup

![Setup with labels](setup_labelled.png)

## Video Of Correct Functionality

Link: https://vimeo.com/813183579

Video below, click on image if video doesn't run (will redirect to vimeo where video is hosted)

[![Video of ESP 32 showing visuals of provisioning and ota update features](https://i.vimeocdn.com/video/813183579.jpg)](https://vimeo.com/813183579)


## Libraries

The code utilizes the following libraries:

- `WiFi.h`: Provides the necessary functions to connect to WiFi networks and set up an access point. (Source: [https://github.com/espressif/arduino-esp32/tree/master/libraries/WiFi](https://github.com/espressif/arduino-esp32/tree/master/libraries/WiFi))
- `WebServer.h`: Used to create a simple HTTP server on the ESP32. (Source: [https://github.com/espressif/arduino-esp32/tree/master/libraries/WebServer](https://github.com/espressif/arduino-esp32/tree/master/libraries/WebServer))
- `HTTPClient.h`: Provides functions to make HTTP requests, used to get firmware updates from the server. (Source: [https://github.com/espressif/arduino-esp32/tree/master/libraries/HTTPClient](https://github.com/espressif/arduino-esp32/tree/master/libraries/HTTPClient))
- `Update.h`: Used for handling OTA updates on the ESP32. (Source: [https://github.com/espressif/arduino-esp32/tree/master/libraries/Update](https://github.com/espressif/arduino-esp32/tree/master/libraries/Update))

## Constants

The following constants are defined, use them wisely:

- `FIRMWARE_VERSION`: Current firmware version of the device.
- `FIRMWARE_SERVER_IP_ADDR`: IP address of the firmware server.
- `FIRMWARE_SERVER_PORT`: Port number of the firmware server.
- `apSSID`: SSID for the ESP32's access point.
- `apPassword`: Password for the ESP32's access point (and no, "password123" is not a good choice ~~ignore my password~~).

## LED Setup

Why can't the Three LEDs stop blinking? because it was too bright.... sorry. They are connected to the following pins:

- `redPin`: Red LED, indicates connection failure. Pin 6.
- `yellowPin`: Yellow LED, indicates connecting or updating. Pin 9
- `greenPin`: Green LED, indicates successful connection. Pin 12

## WebServer

A `WebServer` object, named `server`, is created on port 80. It's like a tiny bouncer for incoming requests.

## Functions

The following functions are defined in the code:

- `handleRoot()`: Handles the root URL ("/") of the web server, displaying a list of available WiFi networks and a form to enter WiFi credentials.
- `handleConnect()`: Handles the "/connect" URL, connecting the device to the specified WiFi network using the provided credentials. It's like a virtual handshake between devices.
- `onButtonPress()`: Triggered by an interrupt when a button connected to GPIO pin 5 is pressed. Sets the `startOTAUpdate` flag to true. Upgrades people, upgrades!
- `setup()`: Initializes the ESP32 device, sets up the access point, and defines the server routes.
- `setLED()`: Sets the state of a given LED pin. 
- `flashLED()`: Flashes a given LED pin for a specified interval and number of times. A rave for LEDs.
- `loop()`: Main loop that checks for incoming HTTP requests and starts an OTA update if the `startOTAUpdate` flag is true. 
- `performOTAUpdate()`: Performs the OTA firmware update process, including checking for new firmware versions and downloading and installing the new firmware. Next level stuff, literally!
- `doCloudGet()`: Performs an HTTP GET request to the firmware server and returns the response code.

## Workflow

1. The device starts in AP mode, creating a WiFi network with the given SSID and password.
2. The user connects to the device's WiFi network and navigates to the root URL. 
3. The user selects a WiFi network and enters its password, then submits the form. 
4. The device connects to the specified WiFi network and displays its IP address. 
5. The user presses a button connected to GPIO pin 5, triggering the OTA update process.
6. The device checks the firmware server for updates and downloads and installs the new firmware if necessary. LED indicators show the update progress and success or failure.

## Visualization

The code uses three LEDs to provide status updates. Here is what each LED lighting up represents:

- Red LED (pin 6): This LED is turned on when there is a connection failure to the WiFi network. It is also turned on if there is a failure during the OTA update process, such as not enough space or a failed update. It is turned off when attempting to connect again or after the OTA update process is complete.
- Yellow LED (pin 9): This LED is turned on while the device is connecting to the WiFi network. It is turned off after the connection is established. During the OTA update process, it flashes once every 500ms to indicate the update is in progress.
- Green LED (pin 12): This LED is turned on after the connection to the WiFi network is established. During the OTA update process, it flashes four times every 500ms to indicate that the update was successful.


## Testing

This project has undergone testing to ensure that it is reliable. Several types of testing have been employed, including:

**Reliable Libraries**

This project uses several reliable libraries such as WiFi, WebServer, HTTPClient, and Update. These libraries have been tested by many developers and are known to be reliable and stable.

**Constants**

Constants for the firmware version, the IP address, and the port number of the firmware server have been defined in this project. This makes it easy to change these values if necessary, without having to go through the entire code.

**WiFi Access Point**

A WiFi access point (AP) with a unique SSID and a secure password has been created in this project. This allows users to connect to the ESP32 and enter their own WiFi credentials to connect to their local network.

**Web Interface**

A web interface has been implemented in this project, which allows users to enter their WiFi credentials. The interface also displays a list of available networks, making it easy for users to select the correct network.

**LED Indicators**

LED indicators have been implemented in this project, which provide visual feedback to the user. The LEDs are turned on and off based on the current state of the ESP32, making it easy for users to understand what is happening.

**Error Handling**

Error handling has been implemented in this project to handle cases where the ESP32 fails to connect to the network or when an OTA update fails. This prevents the ESP32 from getting stuck in a loop and makes it easier to diagnose and fix errors.

## Provisioning Instructions:

These instructions will guide you through the process of provisioning your ESP device, so that it can connect to your WiFi network and become accessible via its own access point.

**1. Put the ESP into bootloader mode:**
    - Hold down the "boot" button on the ESP board, then press the "reset" button.
    - Release the "reset" button, then release the "boot" button.

**2. Burn the code onto the ESP:**
    - Use your preferred method to burn the code onto the ESP board.

**3. Connect to your computer and select the relevant port:**
    - Connect your ESP board to your computer via USB.
    - Select the relevant port in your programming software.
    - Press the "reset" button to run the code.

**4. Connect to the access point created by the ESP:**
    - The ESP will create its own access point, which you can connect to.
    - Define a name and password for the access point.

**5. View the website from the ESP:**
    - In a web browser, go to the URL http://192.168.4.1 to view the website hosted by the ESP.

**6. Enter your WiFi credentials:**
    - Type in the WiFi credentials that you want the ESP to connect to.
    - Make sure that your firewall is not blocking this connection.

## OTA Update Instructions:

These instructions will guide you through the process of updating your ESP device over the air (OTA), using a Python server and compiled binary files.

**1. Ensure that your computer and ESP are on the same WiFi network:**
    - Connect your computer and ESP to the same WiFi network.
    - You can use a hotspot if you prefer.

**2. Find the IPv4 address of your computer's wireless LAN:**
    - Open a new terminal and type "ipconfig".
    - Look for the IPv4 address under the "Wireless LAN" section.

**3. Start a Python server:**
    - Open another terminal window and type "python -m http.server 8000".
    - This will start a server that listens on port 8000.

**4. Upload the sketch.ino file:**
    - Use your preferred method to upload the sketch.ino file to your ESP board.

**5. Increment the firmware version:**
    - Go to "Sketch" > "Export compiled binary" in your programming software.
    - Save the binary file as "N.bin", where "N" is the version number you are updating to.
    - Increment the version number in your sketch.

**6. Save the binary file to the Python server directory:**
    - Save the binary file to the directory where you ran the Python server (step 3).
    - Save it as "N.bin", where "N" is the version number you are updating to.

**7. Add a version.txt file:**
    - Create a file called "version.txt" in the same directory as the binary file.
    - Inside the file, add the integer version number that you are updating to.

**8. Reset the ESP board and open the serial monitor:**
    - Reset the ESP board by pressing the "reset" button.
    - Open the serial monitor in your programming software and select the correct port.

**9. Wait for the update to complete:**
    - Press the button on the breadboard to start the updating process.
    - The ESP board will connect to the Python server and download the new firmware.
    - Wait for the update to complete.


## Notes

Please ensure that the person implementing this code has connected the LEDs and button to the appropriate GPIO pins on the ESP32. They should also set the access point SSID and password, as well as the firmware server IP address and port number according to their specific requirements. You know what they say, measure twice, connect once.
